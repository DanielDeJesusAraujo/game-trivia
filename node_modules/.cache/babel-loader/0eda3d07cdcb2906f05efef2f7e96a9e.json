{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Documentos/TRYBE-PROJECTS/game-trivia/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { IoIosTimer } from 'react-icons/io';\nimport { connect } from 'react-redux';\nimport ButtonAnswer from '../styles/gameStyles/ButtonAnswer';\nimport ContainerAnswer from '../styles/gameStyles/ContainerAnswer';\nimport SectionGame from '../styles/gameStyles/SectionGame';\nimport ContainerQuestion from '../styles/gameStyles/ContainerQuestion';\nimport LogoStyle from '../styles/LogoStyle';\nimport BoxQuestion from '../styles/gameStyles/BoxQuestion';\nimport BoxCategory from '../styles/gameStyles/BoxCategory';\nimport BoxTextQuestion from '../styles/gameStyles/BoxTextQuestion';\nimport IconTrybe from '../styles/IconTrybe';\nimport ButtonStyle from '../styles/ButtonStyle';\nimport TimerComtent from '../styles/TimerStyle';\nimport { rightAnswer, scoreAction } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Questions extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      answerArray: [],\n      answerCorrect: '',\n      category: '',\n      questionText: '',\n      timer: 30,\n      buttonClicked: false\n    };\n\n    this.timeToAnswer = () => {\n      const oneSecond = 1000;\n      const {\n        dispatch,\n        score\n      } = this.props;\n      const intervalTime = setInterval(() => {\n        const {\n          timer\n        } = this.state;\n        const timeLimit = 0;\n\n        if (timer === timeLimit) {\n          this.setState({\n            nextQuestion: true\n          });\n          dispatch(scoreAction(score));\n          clearInterval(intervalTime);\n        } else {\n          this.setState(prevState => ({\n            timer: prevState.timer - 1\n          }));\n        }\n      }, oneSecond);\n      this.setState({\n        intervalTime\n      });\n    };\n\n    this.getListQuestions = () => {\n      const {\n        question: {\n          correct_answer: correctAnswer,\n          incorrect_answers: incorrectAnswers,\n          category,\n          question\n        }\n      } = this.props;\n      const listQuestions = [...incorrectAnswers, correctAnswer];\n      const answerArray = this.shuffleArray(listQuestions);\n      this.setState({\n        answerArray,\n        answerCorrect: correctAnswer,\n        category,\n        questionText: question\n      });\n    };\n\n    this.shuffleArray = arr => {\n      for (let i = arr.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n\n      return arr;\n    };\n\n    this.sumScore = answer => {\n      const {\n        question: {\n          correct_answer: correctAnswer,\n          difficulty\n        },\n        score\n      } = this.props;\n      const {\n        timer\n      } = this.state;\n\n      if (answer === correctAnswer) {\n        const dez = 10;\n        const hard = 3;\n\n        switch (difficulty) {\n          case 'easy':\n            return score + dez + timer * 1;\n\n          case 'medium':\n            return score + dez + timer * 2;\n\n          default:\n            return score + dez + timer * hard;\n        }\n      } else return score;\n    };\n\n    this.handleClick = _ref => {\n      let {\n        target: {\n          name\n        }\n      } = _ref;\n      const {\n        dispatch\n      } = this.props;\n      const {\n        answerCorrect\n      } = this.state;\n      if (name === answerCorrect) dispatch(rightAnswer());\n      this.setState({\n        nextQuestion: true,\n        score: this.sumScore(name)\n      }, () => {\n        const {\n          score\n        } = this.state;\n        dispatch(scoreAction(score));\n      });\n      const {\n        intervalTime\n      } = this.state;\n      clearInterval(intervalTime);\n    };\n\n    this.nextBtnClick = () => {\n      const {\n        handleNext\n      } = this.props;\n      handleNext();\n      this.setState({\n        nextQuestion: false,\n        timer: 30,\n        buttonClicked: true\n      });\n      this.getListQuestions();\n      this.timeToAnswer();\n    };\n  }\n\n  componentDidMount() {\n    this.getListQuestions();\n    this.timeToAnswer();\n  }\n\n  componentDidUpdate() {\n    // alterei isso\n    const {\n      buttonClicked\n    } = this.state;\n\n    if (buttonClicked) {\n      this.getListQuestions();\n      this.setState({\n        buttonClicked: false\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      intervalTime\n    } = this.state;\n    clearInterval(intervalTime);\n  }\n\n  render() {\n    const {\n      answerArray,\n      category,\n      questionText,\n      answerCorrect,\n      nextQuestion,\n      timer\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(SectionGame, {\n      children: [/*#__PURE__*/_jsxDEV(ContainerQuestion, {\n        children: [/*#__PURE__*/_jsxDEV(LogoStyle, {\n          className: \"logoTrivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BoxQuestion, {\n          children: [/*#__PURE__*/_jsxDEV(BoxCategory, {\n            \"data-testid\": \"question-category\",\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BoxTextQuestion, {\n            \"data-testid\": \"question-text\",\n            children: questionText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TimerComtent, {\n            children: [/*#__PURE__*/_jsxDEV(IoIosTimer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Tempo:\", ' ', timer, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconTrybe, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainerAnswer, {\n        \"data-testid\": \"answer-options\",\n        children: [answerArray === null || answerArray === void 0 ? void 0 : answerArray.map((answer, index) => answer === answerCorrect ? /*#__PURE__*/_jsxDEV(ButtonAnswer, {\n          type: \"button\",\n          \"data-testid\": \"correct-answer\",\n          onClick: this.handleClick,\n          className: nextQuestion && 'correctAnswer',\n          disabled: nextQuestion,\n          name: answer,\n          children: answer\n        }, `correct-answer-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ButtonAnswer, {\n          type: \"button\",\n          \"data-testid\": `wrong-answer-${index}`,\n          onClick: this.handleClick,\n          className: nextQuestion && 'wrongAnswer',\n          disabled: nextQuestion,\n          name: answer,\n          children: answer\n        }, `wrong-answer-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)), nextQuestion && /*#__PURE__*/_jsxDEV(ButtonStyle, {\n          \"data-testid\": \"btn-next\",\n          onClick: this.nextBtnClick,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nQuestions.propTypes = {\n  question: PropTypes.shape(PropTypes.object.isRequired).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  handleNext: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  score: state.player.score\n});\n\nexport default connect(mapStateToProps)(Questions);","map":{"version":3,"names":["React","Component","PropTypes","IoIosTimer","connect","ButtonAnswer","ContainerAnswer","SectionGame","ContainerQuestion","LogoStyle","BoxQuestion","BoxCategory","BoxTextQuestion","IconTrybe","ButtonStyle","TimerComtent","rightAnswer","scoreAction","Questions","state","answerArray","answerCorrect","category","questionText","timer","buttonClicked","timeToAnswer","oneSecond","dispatch","score","props","intervalTime","setInterval","timeLimit","setState","nextQuestion","clearInterval","prevState","getListQuestions","question","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","listQuestions","shuffleArray","arr","i","length","j","Math","floor","random","sumScore","answer","difficulty","dez","hard","handleClick","target","name","nextBtnClick","handleNext","componentDidMount","componentDidUpdate","componentWillUnmount","render","map","index","propTypes","shape","object","isRequired","func","number","mapStateToProps","player"],"sources":["/home/daniel/Documentos/TRYBE-PROJECTS/game-trivia/src/components/Questions.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { IoIosTimer } from 'react-icons/io';\nimport { connect } from 'react-redux';\nimport ButtonAnswer from '../styles/gameStyles/ButtonAnswer';\nimport ContainerAnswer from '../styles/gameStyles/ContainerAnswer';\nimport SectionGame from '../styles/gameStyles/SectionGame';\nimport ContainerQuestion from '../styles/gameStyles/ContainerQuestion';\nimport LogoStyle from '../styles/LogoStyle';\nimport BoxQuestion from '../styles/gameStyles/BoxQuestion';\nimport BoxCategory from '../styles/gameStyles/BoxCategory';\nimport BoxTextQuestion from '../styles/gameStyles/BoxTextQuestion';\nimport IconTrybe from '../styles/IconTrybe';\nimport ButtonStyle from '../styles/ButtonStyle';\nimport TimerComtent from '../styles/TimerStyle';\nimport { rightAnswer, scoreAction } from '../redux/actions';\n\nclass Questions extends Component {\n  state = {\n    answerArray: [],\n    answerCorrect: '',\n    category: '',\n    questionText: '',\n    timer: 30,\n    buttonClicked: false,\n  };\n\n  componentDidMount() {\n    this.getListQuestions();\n    this.timeToAnswer();\n  }\n\n  componentDidUpdate() { // alterei isso\n    const { buttonClicked } = this.state;\n    if (buttonClicked) {\n      this.getListQuestions();\n      this.setState({ buttonClicked: false });\n    }\n  }\n\n  componentWillUnmount() {\n    const { intervalTime } = this.state;\n    clearInterval(intervalTime);\n  }\n\n  timeToAnswer = () => {\n    const oneSecond = 1000;\n    const { dispatch, score } = this.props;\n    const intervalTime = setInterval(() => {\n      const { timer } = this.state;\n      const timeLimit = 0;\n      if (timer === timeLimit) {\n        this.setState({ nextQuestion: true });\n        dispatch(scoreAction(score));\n        clearInterval(intervalTime);\n      } else {\n        this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n      }\n    }, oneSecond);\n\n    this.setState({ intervalTime });\n  };\n\n  getListQuestions = () => {\n    const { question:\n      { correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers, category, question } } = this.props;\n    const listQuestions = [...incorrectAnswers, correctAnswer];\n    const answerArray = this.shuffleArray(listQuestions);\n    this.setState(\n      { answerArray, answerCorrect: correctAnswer, category, questionText: question },\n    );\n  };\n\n  shuffleArray = (arr) => {\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  };\n\n  sumScore = (answer) => {\n    const { question: { correct_answer: correctAnswer, difficulty }, score } = this.props;\n    const { timer } = this.state;\n    if (answer === correctAnswer) {\n      const dez = 10;\n      const hard = 3;\n      switch (difficulty) {\n      case 'easy':\n        return score + dez + (timer * 1);\n      case 'medium':\n        return score + dez + (timer * 2);\n      default:\n        return score + dez + (timer * hard);\n      }\n    } else return score;\n  };\n\n  handleClick = ({ target: { name } }) => {\n    const { dispatch } = this.props;\n    const { answerCorrect } = this.state;\n    if (name === answerCorrect) dispatch(rightAnswer());\n    this.setState({ nextQuestion: true, score: this.sumScore(name) }, () => {\n      const { score } = this.state;\n      dispatch(scoreAction(score));\n    });\n    const { intervalTime } = this.state;\n    clearInterval(intervalTime);\n  };\n\n  nextBtnClick = () => {\n    const { handleNext } = this.props;\n    handleNext();\n    this.setState({ nextQuestion: false, timer: 30, buttonClicked: true });\n    this.getListQuestions();\n    this.timeToAnswer();\n  };\n\n  render() {\n    const {\n      answerArray,\n      category,\n      questionText,\n      answerCorrect,\n      nextQuestion, timer } = this.state;\n\n    return (\n      <SectionGame>\n        <ContainerQuestion>\n          <LogoStyle className=\"logoTrivia\" />\n          <BoxQuestion>\n            <BoxCategory data-testid=\"question-category\">{category}</BoxCategory>\n            <BoxTextQuestion data-testid=\"question-text\">{questionText}</BoxTextQuestion>\n            <TimerComtent>\n              <IoIosTimer />\n              <p>\n                Tempo:\n                {' '}\n                {timer}\n                s\n              </p>\n            </TimerComtent>\n          </BoxQuestion>\n          <IconTrybe />\n        </ContainerQuestion>\n        <ContainerAnswer data-testid=\"answer-options\">\n          { answerArray?.map((answer, index) => (answer === answerCorrect ? (\n            <ButtonAnswer\n              type=\"button\"\n              key={ `correct-answer-${index}` }\n              data-testid=\"correct-answer\"\n              onClick={ this.handleClick }\n              className={ nextQuestion && 'correctAnswer' }\n              disabled={ nextQuestion }\n              name={ answer }\n            >\n              { answer }\n            </ButtonAnswer>\n          ) : (\n            <ButtonAnswer\n              type=\"button\"\n              key={ `wrong-answer-${index}` }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ this.handleClick }\n              className={ nextQuestion && 'wrongAnswer' }\n              disabled={ nextQuestion }\n              name={ answer }\n            >\n              { answer }\n            </ButtonAnswer>\n          )))}\n          { nextQuestion && (\n            <ButtonStyle\n              data-testid=\"btn-next\"\n              onClick={ this.nextBtnClick }\n            >\n              Next\n            </ButtonStyle>\n          )}\n        </ContainerAnswer>\n      </SectionGame>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  question: PropTypes.shape(PropTypes.object.isRequired).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  handleNext: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Questions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}